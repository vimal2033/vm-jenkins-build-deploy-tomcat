#---------------------Jenkins master machine--------------------------

#!/bin/bash
sudo yum update -y

#install java21
sudo yum install java-21-openjdk -y

# install wget
sudo yum install wget -y

#jenkins installation

sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade -y
# Add required dependencies for the jenkins package
sudo yum install fontconfig java-21-openjdk -y
sudo yum install jenkins -y
sudo systemctl daemon-reload
sudo systemctl enable jenkins
sudo systemctl start jenkins

#install git
sudo yum install git -y

#***********************machine 2 Jenkins slave*********************************************

# install java 21
 sudo yum install java-21-openjdk -y

# install github
sudo yum install git -y

# install maven
sudo yum install maven -y

sudo useradd -m -d /var/lib/jenkins jenkins
echo "jenkins:jenkins" | sudo chpasswd

# giving nesscery permissions
# sudo visudo
sudo usermod -aG wheel,root jenkins
echo "%wheel ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/wheel_nopasswd
sudo chmod 440 /etc/sudoers.d/wheel_nopasswd


echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config.d/01-permitrootlogin.conf
echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config.d/01-permitrootlogin.conf
#vi /etc/ssh/sshd_config
# PermitRootLogin yes
#systemctl restart sshd

exit
sudo su - Jenkins

 ssh-keygen -t rsa
 cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys
 chmod 600  ~/.ssh/authorized_keys

========================================================================================================
Jenkins GUI:

6. Go to Manage jenkins -> System configuration -> Nodes

a. Create slave node: 
     * New Node 

b. Node Name: Slave_Linux
     no of executors - 4

c. Remote directory -> /var/lib/jenkins


d. Label -> slave1

e. Usage -> use this node as much as possible -> All the request from Jenkins jobs will be sent here for execution,
            only build job will label expression matching this node -> only jobs have slave label configured will be triggerd.

f. Launch method:
    Host - Private Ip
    credentials -> add credentials -> user and password 
                                   -> user -> jenkins
                                    -> id -> description
                                   -> password

g. Host Key Verification Strategy ? - no verifying verification strategy
         Note: when use ssh-key -> manual trusted key verification strategy

h.. Availability ? - > keep this agent as much as possible

i. Node Properties -> tools location -> ADD -> JAVA_HOME = /usr/lib/jvm/java-21-openjdk

k. save 


Note: Add JAVA_HOME under manage jenkins -> tools configuration 
                This settings will enable the tools listing in Node Properties in slave configuration.

===================== Jenkins master slave intigration completed ====================================
-----------------------------------------------------------------------------------------------------------------------
Integration with Github, Maven, SonarQube, Jfrog and Tomcat with Jenkins:
-----------------------------------------------------------------------------------------------------------------------
a. Jenkins Integration with Github
-------------------------------------------------------------------------------------------------------------------
     * Install git tool in Jenkins Master & slave

     * Install plugin in Jenkins GUI
          * Plugin installation : GitHub plugin(by default)

     * Configure the github settings - manage jenkins - system and Tools
           * system and Tools configuration:
              git: default
              path: git

     * Create an Job for github checkout activity and configure the plugin settings
        * Job Configuration: 
            Source Code Management : git
------------------------------------------------------------
b. Jenkins Integration with Maven
     * Install Maven tool in Jenkins slave

     * Install plugin in Jenkins GUI
     * Plugin installation:
       - Maven Integration
       - Pipeline Maven Integration

     * Configure the Maven settings - manage jenkins - system and Tools
     * system and Tools configuration
           name: MAVEN_HOME
           path: /opt/maven

     * Create an Job for Maven Build activity and configure the plugin settings
     * Job Configuration
      * Build Steps:
              Invoke top-level Maven targets?
                 Maven Version:  MAVEN_HOME
                 Goals: clean install
                 Advanced 
                       POM: pom.xml

--------------------------------------------------------------------------------------
c. Jenkins Integration with SonarQube:
--------------------------------------------------------------------------------------
     * Install SonarQube tool in separate machine:

     * Install plugin in Jenkins GUI: SonarQube scanner

     * Configure the SonarQube settings - manage jenkins - system and Tools
     * system and Tools configuration
       - system: 
         *SonarQube installations
              Name: SONAR_HOME
              Server URL :http://3.144.201.227:9000
              Server authentication token
       - Tools configuration:
               SonarQube Scanner installations
                Add SonarQube Scanner
                SonarQube Scanner
                Name : SONAR_SCANNER
                Install automatically ? Install from Maven Central 
                Version SonarQube Scanner 4.4.0.2170

     * Create an Job for SonarQube Build activity and configure the plugin settings
       * Job Configuration: 
             Create - Code_Analysis Job

----------------------------------------------
sonar-project.properties
----------------------------------------------
sonar.host.url=http://3.108.40.179:9000
sonar.projectKey=Pipeline:project
sonar.projectName=Pipeline-project
sonar.projectVersion=1.0
sonar.sources=./
sonar.java.binaries=.
sonar.sourceEncoding=UTF-8
sonar.login=sqp_fc142da68fe097242638ff555c03c4c8a17cabfc
-----------------------------------------------------------------------------------------
d. Jenkins Integration with Jfrog:
--------------------------------------------------------------------------------------
     * Install Jfrog tool in separate machine

     * Install plugin in Jenkins GUI -  artifactory

     * Configure the Jfrog settings - manage jenkins - system and Tools(N/A)

     * Create an Job for Jfrog Build activity and configure the plugin settings
            Create - Artifact_Upload_Job
-----------------------------------------------------------------------------------------
e. Jenkins Integration with Tomcat:
--------------------------------------------------------------------------------------
     * Install Tomcat tool in separate machine.

     * Install plugin in Jenkins GUI - Deploy to container

     * Configure the Tomcat settings - manage jenkins - system and Tools - N/A


     * Create an Job for Tomcat Build activity and configure the plugin settings

* Job Configuration
     Post-build Actions -> deploy war/ear to container
           -> WAR/EAR files -> Target/*.war
           -> Context path  -> /demoproject
           -> Containers -> add containers -> apache tomat 7 
           -> credentials -> admin/admin
           -> tomcat url  -> http://IP:8080/8082
------------------------------------------------------------------------------------------
-------------------manual integration completed project is working------------------------
----------------------------------------------------------------------------------------
========================================================================================================================
Jenkinsfile for scripted pipeline
========================================================================================================================
pipeline{
    agent {
      node {
	label 'slave_1'
    }
}

    tools {
         maven 'MAVEN_HOME'
         jdk 'JAVA_HOME'
    }

    stages{
        stage('pre-build step') {
            steps {
		sh '''
                echo "Pre Build Step for Webhook Trigges the pipeline on push event"
		'''
	    }
	}
        stage('Git Checkout'){
            steps{
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'github access', url: 'https://github.com/GoudSagar/Hello-World-Code.git']]])
            }
        }
        stage('build'){
            steps{
               sh '''
                mvn package
                '''
            }
        }
        stage ('Unit Test') {
	        steps {
                echo 'Running Unit Testing'
                sh '''
                mvn test
                '''
             }
         }
  
        stage ('Static Code Analysis') {
             environment {
             scannerHome = tool 'SONAR_SCANNER'
             }
             steps {
                echo 'Running Static Code Analysis'
                 withSonarQubeEnv('SONAR_HOME') {
                 sh '${scannerHome}/bin/sonar-scanner'
                 }
            }
        }
	stage('Jfrog Artifact Upload') {
            steps {
              rtUpload (
                serverId: 'artifactory',
                spec: '''{
                      "files": [
                        {
                          "pattern": "*.war",
                           "target": "local-snapshots"
                        }
                    ]
                }'''
              )
          }
        }
        stage ('Tomcat Deployment') {
           steps {
             script {
                 deploy adapters: [tomcat7(credentialsId: 'tomcat-credentials', path: '', url: 'http://52.15.212.198:8080')], contextPath: '/webapp-app', onFailure: false, war: 'webapp/target/webapp.war' 
                    }
                  }
           }
         stage('post-build step') {
            steps {
		sh '''
                echo "Successfull Pipeline for Tomcat Deployment"
		'''
	    }
	}
    
     }
}

=============================================================================================================================






